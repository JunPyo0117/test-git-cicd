name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_NAME: cicd-demo
  EKS_CLUSTER_NAME: cicd-cluster
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    # AWS 자격 증명을 한 번만 구성
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::471303021447:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: github-actions-${{ github.run_id }}
    
    # ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    # 백엔드 빌드 및 푸시
    - name: Build and push Backend image
      working-directory: ./backend
      run: |
        docker build -t backend .
        docker tag backend:latest ${{ steps.login-ecr.outputs.registry }}/cicd-demo-backend:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/cicd-demo-backend:latest
    
    # EKS 설정
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --role-arn arn:aws:iam::471303021447:role/github-actions-role
        aws sts get-caller-identity
        
        # Test EKS access with proper authentication
        kubectl get nodes --validate=false
        
        # Apply aws-auth ConfigMap to enable GitHub Actions access
        kubectl apply -f k8s/aws-auth-configmap.yaml --validate=false
    
    # 백엔드 배포
    - name: Deploy Backend to EKS
      run: |
        # Verify EKS cluster access
        echo "Verifying EKS cluster access..."
        kubectl get nodes --validate=false
        
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml --validate=false
        
        # Create database secret
        kubectl create secret generic db-secret \
          --from-literal=host=${{ secrets.DB_HOST }} \
          --from-literal=port=5432 \
          --from-literal=username=postgres \
          --from-literal=password=${{ secrets.DB_PASSWORD }} \
          --from-literal=database=cicd_demo \
          -n cicd-demo --dry-run=client -o yaml | kubectl apply -f - --validate=false
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/backend-deployment.yaml --validate=false
        kubectl apply -f k8s/backend-service.yaml --validate=false
        kubectl apply -f k8s/ingress.yaml --validate=false
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/backend -n cicd-demo --timeout=300s
    
    # 프론트엔드 빌드 및 배포
    - name: Setup Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build Frontend
      working-directory: ./frontend
      env:
        VITE_API_URL: ${{ secrets.API_URL }}
      run: npm run build
    
    - name: Deploy Frontend to S3
      run: |
        aws s3 sync ./frontend/dist s3://${{ env.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
